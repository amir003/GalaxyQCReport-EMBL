package org.embl.gbcs.ngsutils;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.embl.cg.utilitytools.utils.ExceptionUtil;
import org.embl.cg.utilitytools.utils.FileUtil;

public class GenerateNGSQCReportAfterGalaxyWF {

	/**
	 * CSS Style for generated tables in html files
	 */	
	
	public static final String TABLE_CSS = "";
	
 
	
	public static String getHmtlInclude(int levelNUmber){
		String model = 
				"<script type=\"text/javascript\" src=\"__REL_PATH_REPLACE__/js/jquery.min.js\"></script>\n" +
				"<script type=\"text/javascript\" src=\"__REL_PATH_REPLACE__/js/jquery.dataTables.min.js\"></script>\n" +
				"<script type=\"text/javascript\" src=\"__REL_PATH_REPLACE__/js/attc.googleCharts.js\"></script>\n" +
				"<link rel=\"stylesheet\" href=\"__REL_PATH_REPLACE__/css/styleBasic.css\" type=\"text/css\" >\n" +
				"<link rel=\"stylesheet\" href=\"__REL_PATH_REPLACE__/css/jquery.dataTables.min.css\" type=\"text/css\" >\n " ;//+
				//"<script type=\"text/javascript\" src=\"__REL_PATH_REPLACE__/js/jsapi\"></script>\n " ;
		
		
		String relpath = "..";
		for (int i = 1; i < levelNUmber; i++) {
			relpath += "/..";
		}
		return model.replaceAll("__REL_PATH_REPLACE__", relpath);
	}
	
	
	public static final String SAMPLE_HEADER = "Sample";

	/*
	 * Name of the read mapper used, this is important to use the same key as the WF uses to generate file names  
	 */
	public static final String MAPPERNAME = "bowtie2";
	
	/*
	 * Names of the different directories found directly under the QC dir
	 *  
	 */
	
	//alignment metrics from PICARD SAM/BAM Alignment Summary metrics
	public static final String ALIGN_METRIC_DIRNAME = "alignment-metrics";
	
	//dir containing fastqc reports FASTQC 
	public static final String FASTQC_DIRNAME = "fastqc";
	
	//dir containing read dups metrics reports generated by Picard Mark Duplicates
	public static final String READ_DUPS_METRIC_DIRNAME = "read_duplication-metrics";
	
	//dir containing SPP results, this dir is then organized into sub dirs
	public static final String SPP_DIRNAME = "SPP";
	
	//ONLY relevant for PAIRED END
	public static final String INSERTSIZE_METRIC_DIRNAME = "insert-size-metrics";
	
	
	/*
	 * Sub-dir names, when application
	 */
	
	//sub dir containing the spp strand correlation, this dir is found in the SPP_DIRNAME
	public static final String SPP_STRANDCORR_DIRNAME = "strand_cross_correlation";
	
	
	
	//the top dir containing all QC results 
	protected File qcDir;
	//list of sample names, these must be found in each file name 
	protected List<String> samples = null;

	protected String trimSplLeft = "";
	protected String trimSplRight  = "";


	
	
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args){
		/*
		if((args == null)||(args.length == 0)){
			System.err.println("Wrong directory, please enter the correct directory.");
			//System.exit(1); // decomment this line for the final version and replace the path by 'args[0]'
		}
		*/
		//String qcDirPath = args[0];
		String qcDirPath = "/Users/amirnaar/Desktop/qc_Feb2015";
		File qcDir = new File(qcDirPath);
		
		
		
		if(!qcDir.exists())
			System.err.println("Directory does not exist : "+qcDirPath);
		if(!qcDir.canRead())
			System.err.println("Directory can not be read, please check rights : "+qcDirPath);
		
		for(String dname : new String[]{ALIGN_METRIC_DIRNAME, FASTQC_DIRNAME, READ_DUPS_METRIC_DIRNAME, SPP_DIRNAME}){
			File d = new File (qcDir, dname);
			if(!d.canWrite()){
				System.err.println("Cannot write in dir, please change rights : "+ d.getName());
			}
		}
		
		GenerateNGSQCReportAfterGalaxyWF g = new GenerateNGSQCReportAfterGalaxyWF(qcDir);
		
		if(args.length >= 2){
			for (int i = 1; i < args.length; i++) {
				String o = args[i];
				//either trimSplLeft=XX or trimSplRight=XX 
				String [] tokens = o.split("=");
				if(tokens[0].equalsIgnoreCase("trimSplLeft")){
					String trimSplLeft = tokens[1];
					g.setTrimSplLeft(trimSplLeft);
				}
				else if(tokens[0].equalsIgnoreCase("trimSplRight")){
					String trimSplRight = tokens[1];
					g.setTrimSplRight(trimSplRight);
				}
			}
		}
		
		g.run();
	}
	
	
	
	
	public GenerateNGSQCReportAfterGalaxyWF(File qcDir){
		this.qcDir = qcDir;
	}
	
	
	public void run(){
		try{
			copySupportFiles();
		}catch (Exception e) {
			System.err.println(ExceptionUtil.getStackTrace(e));
			System.err.println("Could not copy JS and CSS support files.");
			System.exit(1);
		}
		extractSampleList();
		
		for (String  spl : samples) {
			System.out.println("Extracted sample : "+spl);
		}
		
		String fname = null;
		PrintWriter pw = null;
		try{
			pw = new PrintWriter(new File(qcDir, "GlobalQCReport.html"));

			pw.println("<!DOCTYPE html><head>");
			pw.println("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />");
			pw.println("<body>");
			pw.println("<h1>Global QC Report</h1>");
			pw.println("<b>NB:</b>Sub-directories also contains easy-to-load summary CSV tables.");
			
			pw.println("<h2>FASTQC Report Overview</h2>");
			//generate summary for fastqc
			fname = generateReportForFASTQC(new File(qcDir, FASTQC_DIRNAME), samples);
			String lnk = "./"+FASTQC_DIRNAME+"/"+fname;
			pw.println("<a href=\""+lnk+"\">Open summary report for all samples</a>");
			
			pw.println("<h2>Read Alignment Metrics</h2>");
			//generate summary file for alignment metrics
			fname =generateReportForAlignmentMetrics(new File(qcDir, ALIGN_METRIC_DIRNAME), samples);
			lnk = "./"+ALIGN_METRIC_DIRNAME+"/"+fname;
			pw.println("<a href=\""+lnk+"\">Open summary report for all samples</a>");
			
			
			pw.println("<h2>Read Duplication Metrics</h2>");
			//generate summary file for read  dups metrics
			fname =generateReportForReadDuplicationMetrics(new File(qcDir, READ_DUPS_METRIC_DIRNAME), samples);
			lnk = "./"+READ_DUPS_METRIC_DIRNAME+"/"+fname;
			pw.println("<a href=\""+lnk+"\">Open summary report for all samples</a>");
			
			pw.println("<h2>Strand cross-correlation Metrics and ChIP-seq quality score</h2>");
			//generate summary file for SPP cross-correl
			fname =generateReportForStrandCrossCorrelationMetrics(new File(new File(qcDir, SPP_DIRNAME), SPP_STRANDCORR_DIRNAME), samples);
			lnk = "./"+SPP_DIRNAME+"/"+SPP_STRANDCORR_DIRNAME+"/"+fname;
			pw.println("<a href=\""+lnk+"\">Open summary report for all samples</a>");
			
			//generate summary file for insert size
			fname =generateReportForInsertSizeMetrics(new File(qcDir, INSERTSIZE_METRIC_DIRNAME), samples);
			if(fname!=null){
				pw.println("<h2>Insert Size Metrics (Paired-end)</h2>");
				lnk = "./"+INSERTSIZE_METRIC_DIRNAME+"/"+fname;
				pw.println("<a href=\""+lnk+"\">Open summary report for all samples</a>");
			}
			pw.println("</body></html>");
			
			
			
		} catch (IOException e) {
			throw new RuntimeException(e);
		}finally{
			if(pw!=null)
				pw.close();
		}	
				
		
	}


	private void copySupportFiles() throws IOException {
		//JS
		File jsDir = new File(qcDir, "js");
		File cssDir = new File(qcDir, "css");
		FileUtil.checkWritableDir(jsDir, true);
		FileUtil.checkWritableDir(cssDir, true);
		
		
		//FileUtil.copyFile( GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("googleChart/jsapi"), new File(jsDir.getAbsolutePath(), "jsapi"));
		FileUtil.copyFile( GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("googleChart/jquery.min.js"), new File(jsDir.getAbsolutePath(), "jquery.min.js"));
		
		// ADD GoogleChart
		FileUtil.copyFile( GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("googleChart/attc.googleCharts.js"), new File(jsDir.getAbsolutePath(), "attc.googleCharts.js"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("googleChart/themes/style.css"), new File(cssDir.getAbsolutePath(), "style.css"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("googleChart/themes/styleBasic.css"), new File(cssDir.getAbsolutePath(), "styleBasic.css"));
	
		// DataTable added in local
		FileUtil.copyFile( GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/jquery.dataTables.min.js"), new File(jsDir.getAbsolutePath(), "jquery.dataTables.min.js"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/themes/jquery.dataTables.min.css"), new File(cssDir.getAbsolutePath(), "jquery.dataTables.min.css"));
	
		
		//Images added for DataTable
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/images/sort_both.png"), new File(cssDir.getAbsolutePath(), "sort_both.png"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/images/sort_asc.png"), new File(cssDir.getAbsolutePath(), "sort_asc.png"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/images/sort_desc.png"), new File(cssDir.getAbsolutePath(), "sort_desc.png"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/images/sort_asc_disabled.png"), new File(cssDir.getAbsolutePath(), "sort_asc_disabled.png"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("dataTable/images/sort_desc_disabled.png"), new File(cssDir.getAbsolutePath(), "sort_desc_disabled.png"));
		
		//Opentip to display text in a bull
		FileUtil.copyFile( GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("openTip/opentip-jquery.min.js"), new File(jsDir.getAbsolutePath(), "opentip-jquery.min.js"));
		FileUtil.copyFile(GenerateNGSQCReportAfterGalaxyWF.class.getResourceAsStream("openTip/themes/opentip.css"), new File(cssDir.getAbsolutePath(), "opentip.css"));
			
	}


	private String generateReportForInsertSizeMetrics(File dir, List<String> samples) {
		if(!dir.exists()){
			return null;
		}
		System.out.println("Processing Insert Size Metrics Reports...");
		InsertSizeMetricsReportGenerator g = new InsertSizeMetricsReportGenerator(dir, samples);
		g.generateReport(dir);
		System.out.println("Processing Insert Size Metrics Reports...DONE");
		return g.getHtmlSummaryFile().getName();
	}


	

	private String generateReportForStrandCrossCorrelationMetrics(File dir, List<String> samples) {
		System.out.println("Processing SPP Strand Cross-Correlation Metrics Reports...");
		SPPStrandCrossCorrelationMetricsReportGenerator g = new SPPStrandCrossCorrelationMetricsReportGenerator(dir, samples);
		g.generateReport(dir);
		System.out.println("Processing SPP Strand Cross-Correlation Metrics Reports...DONE");
		return g.getHtmlSummaryFile().getName();
	}


	private String generateReportForReadDuplicationMetrics(File dir, List<String> samples) {
		System.out.println("Processing Read Duplication Metrics Reports...");
		ReadDuplicationMetricsReportGenerator g = new ReadDuplicationMetricsReportGenerator(dir, samples);
		g.generateReport(dir);
		
		System.out.println("Processing Read Duplication Metrics Reports...DONE");
		return g.getHtmlSummaryFile().getName();
	}


	private String generateReportForAlignmentMetrics(File dir, List<String> samples) {
		System.out.println("Processing Alignment Metrics Reports...");
		AlignmentMetricsReportGenerator g = new AlignmentMetricsReportGenerator(dir, samples);
		g.generateReport(dir);
		
		System.out.println("Processing Alignment Metrics Reports...DONE");
		return g.getHtmlSummaryFile().getName();
	}


	private String generateReportForFASTQC(File dir, List<String> samples) {
		System.out.println("Processing FASTQC Reports...");
		MultiFastQCReportGenerator g = new MultiFastQCReportGenerator(dir, samples);
		g.generateReport(dir);
		
		System.out.println("Processing FASTQC Reports...DONE");
		return g.getHtmlSummaryFile().getName();
	}


	/**
	 * we use a dir that is always there ie READ_DUPS_METRIC_DIRNAME; and assume file naming follows 'Duplication_metrics_<samplename>_bowtie2' 
	 */
	private List<String> extractSampleList() {
		File []  l = new File(qcDir, READ_DUPS_METRIC_DIRNAME).listFiles();
		samples = new ArrayList<String>();
		for(File f : l){
			if(f.isDirectory()){
				//extract sample name
				String s = f.getName().replaceAll("Duplication_metrics_", "").replace("_"+MAPPERNAME, "");
				if(!StringUtils.isEmpty(this.trimSplLeft))
					s = s.replaceFirst(this.trimSplLeft, "");
				if(!StringUtils.isEmpty(this.trimSplRight)){
					s = s.replaceAll(trimSplRight+"$", "");
				}
				samples.add(s);
			}
		}
		Collections.sort(samples);
		return samples;
		
	}




	/**
	 * @return the trimSplLeft
	 */
	public String getTrimSplLeft() {
		return trimSplLeft;
	}




	/**
	 * @return the trimSplRight
	 */
	public String getTrimSplRight() {
		return trimSplRight;
	}




	/**
	 * @param trimSplLeft the trimSplLeft to set
	 */
	public void setTrimSplLeft(String trimSplLeft) {
		this.trimSplLeft = trimSplLeft;
	}




	/**
	 * @param trimSplRight the trimSplRight to set
	 */
	public void setTrimSplRight(String trimSplRight) {
		this.trimSplRight = trimSplRight;
	}
	

}
